(*
    <vscr - Verilog converter to abc format.>
    Copyright (C) <2011,2012>  <Jonathan Richard Robert Kimmitt>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*)

{
open Lexing
open Xdl_parser
open Setup

let trace = ref false
let logf = ref None

let ksymbols = Hashtbl.create 256;;

let enter_keyword id keyword = 
if Hashtbl.mem ksymbols id then
  Printf.printf "Error: repeated keyword %s\n" id
else begin
(*  Printf.printf "Enter %s\n" id; *)
  Hashtbl.add ksymbols id keyword
  end

let trace_log ktok = if !trace then match !logf with
  | None -> logf := Some (open_out "xdl_lexer.log")
  | Some stream ->
    Printf.fprintf stream "%s\n" (Ord.getstr ktok);
    if ktok = ENDOFFILE then ( close_out stream; logf := None )

let hlog lexbuf ktok:token = begin
histcnt := (!histcnt+1)mod hsiz;
history.(!histcnt) <- {tok=ktok;strt=(Lexing.lexeme_start lexbuf);stop=(Lexing.lexeme_end lexbuf);key=true};
trace_log ktok;
ktok
end

let _ = List.iter (fun (str,key) -> enter_keyword str key)
[
(  "design",	DESIGN ) ;
(  "module",		MODULE ) ;
(  "endmodule",		ENDMODULE ) ;
(  "port",      PORT ) ;
(  "instance",	INST ) ;
(  "inst",	INST ) ;
(  "net",		NET ) ;
(  "cfg",		CFG ) ;
(  "placed",		PLACED ) ;
(  "unplaced",		UNPLACED ) ;
(  "bonded",		BONDED ) ;
(  "unbonded",		UNBONDED ) ;
(  "power",		POWER ) ;
(  "vcc",		POWER ) ;
(  "vdd",		POWER ) ;
(  "ground",		GROUND ) ;
(  "gnd",		GROUND ) ;
(  "inpin",		INPIN ) ;
(  "outpin",		OUTPIN ) ;
(  "pip",		PIP );
(  "BUS_INFO",		BUS_INFO );
(  "PIN_INFO",		PIN_INFO );
(  "_DESIGN_PROP", DESIGN_PROP) ];;
}

let digit = ['0'-'9']
let state4 = ['0'-'1' 'x' 'z' '?' 'X' 'Z' 'b' 'B']
let ident = ['a'-'z' 'A'-'Z' '_']
let ident_num = ['a'-'z' 'A'-'Z' '_' '0'-'9' '$']
let anything = [
   '\000' '\001' '\002' '\003' '\004' '\005' '\006' '\007' '\008' '\009' '\010' '\011' '\012' '\013' '\014' '\015'
   '\016' '\017' '\018' '\019' '\020' '\021' '\022' '\023' '\024' '\025' '\026' '\027' '\028' '\029' '\030' '\031'
   '\032' '\033' '\034' '\035' '\036' '\037' '\038' '\039' '\040' '\041' '\042' '\043' '\044' '\045' '\046' '\047'
   '\048' '\049' '\050' '\051' '\052' '\053' '\054' '\055' '\056' '\057' '\058' '\059' '\060' '\061' '\062' '\063'
   '\064' '\065' '\066' '\067' '\068' '\069' '\070' '\071' '\072' '\073' '\074' '\075' '\076' '\077' '\078' '\079'
   '\080' '\081' '\082' '\083' '\084' '\085' '\086' '\087' '\088' '\089' '\090' '\091' '\092' '\093' '\094' '\095'
   '\096' '\097' '\098' '\099' '\100' '\101' '\102' '\103' '\104' '\105' '\106' '\107' '\108' '\109' '\110' '\111'
   '\112' '\113' '\114' '\115' '\116' '\117' '\118' '\119' '\120' '\121' '\122' '\123' '\124' '\125' '\126' '\127'
   '\128' '\129' '\130' '\131' '\132' '\133' '\134' '\135' '\136' '\137' '\138' '\139' '\140' '\141' '\142' '\143'
   '\144' '\145' '\146' '\147' '\148' '\149' '\150' '\151' '\152' '\153' '\154' '\155' '\156' '\157' '\158' '\159'
   '\160' '\161' '\162' '\163' '\164' '\165' '\166' '\167' '\168' '\169' '\170' '\171' '\172' '\173' '\174' '\175'
   '\176' '\177' '\178' '\179' '\180' '\181' '\182' '\183' '\184' '\185' '\186' '\187' '\188' '\189' '\190' '\191'
   '\192' '\193' '\194' '\195' '\196' '\197' '\198' '\199' '\200' '\201' '\202' '\203' '\204' '\205' '\206' '\207'
   '\208' '\209' '\210' '\211' '\212' '\213' '\214' '\215' '\216' '\217' '\218' '\219' '\220' '\221' '\222' '\223'
   '\224' '\225' '\226' '\227' '\228' '\229' '\230' '\231' '\232' '\233' '\234' '\235' '\236' '\237' '\238' '\239'
   '\240' '\241' '\242' '\243' '\244' '\245' '\246' '\247' '\248' '\249' '\250' '\251' '\252' '\253' '\254' '\255' ]
let anything_but_blank = [
    '\000' '\001' '\002' '\003' '\004' '\005' '\006' '\007' '\008' '\009' '\010' '\011' '\012' '\013' '\014' '\015'
    '\016' '\017' '\018' '\019' '\020' '\021' '\022' '\023' '\024' '\025' '\026' '\027' '\028' '\029' '\030' '\031'
           '\033' '\034' '\035' '\036' '\037' '\038' '\039' '\040' '\041' '\042' '\043' '\044' '\045' '\046' '\047'
    '\048' '\049' '\050' '\051' '\052' '\053' '\054' '\055' '\056' '\057' '\058' '\059' '\060' '\061' '\062' '\063'
    '\064' '\065' '\066' '\067' '\068' '\069' '\070' '\071' '\072' '\073' '\074' '\075' '\076' '\077' '\078' '\079'
    '\080' '\081' '\082' '\083' '\084' '\085' '\086' '\087' '\088' '\089' '\090' '\091' '\092' '\093' '\094' '\095'
    '\096' '\097' '\098' '\099' '\100' '\101' '\102' '\103' '\104' '\105' '\106' '\107' '\108' '\109' '\110' '\111'
    '\112' '\113' '\114' '\115' '\116' '\117' '\118' '\119' '\120' '\121' '\122' '\123' '\124' '\125' '\126' '\127'
    '\128' '\129' '\130' '\131' '\132' '\133' '\134' '\135' '\136' '\137' '\138' '\139' '\140' '\141' '\142' '\143'
    '\144' '\145' '\146' '\147' '\148' '\149' '\150' '\151' '\152' '\153' '\154' '\155' '\156' '\157' '\158' '\159'
    '\160' '\161' '\162' '\163' '\164' '\165' '\166' '\167' '\168' '\169' '\170' '\171' '\172' '\173' '\174' '\175'
    '\176' '\177' '\178' '\179' '\180' '\181' '\182' '\183' '\184' '\185' '\186' '\187' '\188' '\189' '\190' '\191'
    '\192' '\193' '\194' '\195' '\196' '\197' '\198' '\199' '\200' '\201' '\202' '\203' '\204' '\205' '\206' '\207'
    '\208' '\209' '\210' '\211' '\212' '\213' '\214' '\215' '\216' '\217' '\218' '\219' '\220' '\221' '\222' '\223'
    '\224' '\225' '\226' '\227' '\228' '\229' '\230' '\231' '\232' '\233' '\234' '\235' '\236' '\237' '\238' '\239'
    '\240' '\241' '\242' '\243' '\244' '\245' '\246' '\247' '\248' '\249' '\250' '\251' '\252' '\253' '\254' '\255' ]
let anything_but_newline = [
   '\000' '\001' '\002' '\003' '\004' '\005' '\006' '\007' '\008' '\009'        '\011' '\012' '\013' '\014' '\015'
   '\016' '\017' '\018' '\019' '\020' '\021' '\022' '\023' '\024' '\025' '\026' '\027' '\028' '\029' '\030' '\031'
   '\032' '\033' '\034' '\035' '\036' '\037' '\038' '\039' '\040' '\041' '\042' '\043' '\044' '\045' '\046' '\047'
   '\048' '\049' '\050' '\051' '\052' '\053' '\054' '\055' '\056' '\057' '\058' '\059' '\060' '\061' '\062' '\063'
   '\064' '\065' '\066' '\067' '\068' '\069' '\070' '\071' '\072' '\073' '\074' '\075' '\076' '\077' '\078' '\079'
   '\080' '\081' '\082' '\083' '\084' '\085' '\086' '\087' '\088' '\089' '\090' '\091' '\092' '\093' '\094' '\095'
   '\096' '\097' '\098' '\099' '\100' '\101' '\102' '\103' '\104' '\105' '\106' '\107' '\108' '\109' '\110' '\111'
   '\112' '\113' '\114' '\115' '\116' '\117' '\118' '\119' '\120' '\121' '\122' '\123' '\124' '\125' '\126' '\127'
   '\128' '\129' '\130' '\131' '\132' '\133' '\134' '\135' '\136' '\137' '\138' '\139' '\140' '\141' '\142' '\143'
   '\144' '\145' '\146' '\147' '\148' '\149' '\150' '\151' '\152' '\153' '\154' '\155' '\156' '\157' '\158' '\159'
   '\160' '\161' '\162' '\163' '\164' '\165' '\166' '\167' '\168' '\169' '\170' '\171' '\172' '\173' '\174' '\175'
   '\176' '\177' '\178' '\179' '\180' '\181' '\182' '\183' '\184' '\185' '\186' '\187' '\188' '\189' '\190' '\191'
   '\192' '\193' '\194' '\195' '\196' '\197' '\198' '\199' '\200' '\201' '\202' '\203' '\204' '\205' '\206' '\207'
   '\208' '\209' '\210' '\211' '\212' '\213' '\214' '\215' '\216' '\217' '\218' '\219' '\220' '\221' '\222' '\223'
   '\224' '\225' '\226' '\227' '\228' '\229' '\230' '\231' '\232' '\233' '\234' '\235' '\236' '\237' '\238' '\239'
   '\240' '\241' '\242' '\243' '\244' '\245' '\246' '\247' '\248' '\249' '\250' '\251' '\252' '\253' '\254' '\255' ]
let anything_but_quote = [
   '\000' '\001' '\002' '\003' '\004' '\005' '\006' '\007' '\008' '\009' '\010' '\011' '\012' '\013' '\014' '\015'
   '\016' '\017' '\018' '\019' '\020' '\021' '\022' '\023' '\024' '\025' '\026' '\027' '\028' '\029' '\030' '\031'
   '\032' '\033'        '\035' '\036' '\037' '\038' '\039' '\040' '\041' '\042' '\043' '\044' '\045' '\046' '\047'
   '\048' '\049' '\050' '\051' '\052' '\053' '\054' '\055' '\056' '\057' '\058' '\059' '\060' '\061' '\062' '\063'
   '\064' '\065' '\066' '\067' '\068' '\069' '\070' '\071' '\072' '\073' '\074' '\075' '\076' '\077' '\078' '\079'
   '\080' '\081' '\082' '\083' '\084' '\085' '\086' '\087' '\088' '\089' '\090' '\091' '\092' '\093' '\094' '\095'
   '\096' '\097' '\098' '\099' '\100' '\101' '\102' '\103' '\104' '\105' '\106' '\107' '\108' '\109' '\110' '\111'
   '\112' '\113' '\114' '\115' '\116' '\117' '\118' '\119' '\120' '\121' '\122' '\123' '\124' '\125' '\126' '\127'
   '\128' '\129' '\130' '\131' '\132' '\133' '\134' '\135' '\136' '\137' '\138' '\139' '\140' '\141' '\142' '\143'
   '\144' '\145' '\146' '\147' '\148' '\149' '\150' '\151' '\152' '\153' '\154' '\155' '\156' '\157' '\158' '\159'
   '\160' '\161' '\162' '\163' '\164' '\165' '\166' '\167' '\168' '\169' '\170' '\171' '\172' '\173' '\174' '\175'
   '\176' '\177' '\178' '\179' '\180' '\181' '\182' '\183' '\184' '\185' '\186' '\187' '\188' '\189' '\190' '\191'
   '\192' '\193' '\194' '\195' '\196' '\197' '\198' '\199' '\200' '\201' '\202' '\203' '\204' '\205' '\206' '\207'
   '\208' '\209' '\210' '\211' '\212' '\213' '\214' '\215' '\216' '\217' '\218' '\219' '\220' '\221' '\222' '\223'
   '\224' '\225' '\226' '\227' '\228' '\229' '\230' '\231' '\232' '\233' '\234' '\235' '\236' '\237' '\238' '\239'
   '\240' '\241' '\242' '\243' '\244' '\245' '\246' '\247' '\248' '\249' '\250' '\251' '\252' '\253' '\254' '\255' ]

rule token = parse
| "=>"                 { hlog lexbuf (BIDIRUNIBUF) }
| "=="			{ hlog lexbuf (BIDIRUNBUF) }
| "=-"			{ hlog lexbuf (BIDIRBIBUF) }
| "->"			{ hlog lexbuf (UNIDIRBUF) }
| "::" { hlog lexbuf (DUPLECOLON) }
| ":" { hlog lexbuf (COLON) }
| "," { hlog lexbuf (COMMA) }
| "." { hlog lexbuf (DOT) }
| "/" { hlog lexbuf (SLASH) }
| "#ON" { hlog lexbuf (HASHON) }
| "#OFF" { hlog lexbuf (HASHOFF) }
| "#LUT" { hlog lexbuf (HASHLUT) }
| "#RAM" { hlog lexbuf (HASHRAM) }
| "#AND2L" { hlog lexbuf (HASHAND2L) }
| "#FF" { hlog lexbuf (HASHFF) }
| "# "anything_but_newline* {token lexbuf}
| "#net"anything_but_newline* {token lexbuf}
| "#" { hlog lexbuf (HASH) }
| "{" { hlog lexbuf (OBRACE) }
| "}" { hlog lexbuf (EBRACE) }
| "<" { hlog lexbuf (OBUS) }
| ">" { hlog lexbuf (EBUS) }
| "(" { hlog lexbuf (OPAREN) }
| ")" { hlog lexbuf (EPAREN) }
| "[" { hlog lexbuf (OBRACK) }
| "]" { hlog lexbuf (EBRACK) }
| ";" { hlog lexbuf (SEMICOLON) }
| "~" { hlog lexbuf (TILDE) }
| "@" { hlog lexbuf (AT) }
| "+" { hlog lexbuf (PLUS) }
| "-" { hlog lexbuf (DASH) }
| "*" { hlog lexbuf (STAR) }
| "=" { hlog lexbuf (EQUALS) }
| "$" ident ident_num* as word {
if Hashtbl.mem ksymbols word then let kw = Hashtbl.find ksymbols word in hlog lexbuf kw else hlog lexbuf (IDENTIFIER word)
}
| "v"digit+'.'digit+ as vnum { hlog lexbuf (XDLVERSION vnum ) }
| digit+'.'digit+ as fnum { hlog lexbuf (FLOATNUM fnum ) }
| digit+ as inum { hlog lexbuf (INUM inum ) }
| [' ' '\t' '\r'] {token lexbuf }
| '\n' { hlog lexbuf (NEWLINE) }
| '\"' { hlog lexbuf (DUPLEQUOTE) }
| "\\:" { hlog lexbuf (BUSDELIM) }
| "\\\"" { hlog lexbuf (ESCDQUOTE) }
| "\\ " { hlog lexbuf (SPACE) }
| "\\" { hlog lexbuf (BACKSLASH) }
| ident ident_num* as word {
if Hashtbl.mem ksymbols word then hlog lexbuf (Hashtbl.find ksymbols word) else hlog lexbuf (IDENTIFIER word)
}
  | eof		{ hlog lexbuf (ENDOFFILE) }
  | _		{ hlog lexbuf (ILLEGAL ( lexeme_char lexbuf 0 ) ) }
